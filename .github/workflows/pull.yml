name: Run tests on pull request

on:
  workflow_dispatch:
    inputs:
      BASE_PATH:
      GIT_SHA:
      STAGING:
      E2E:
  pull_request:
    branches: [ master ]

inputs:
  COMMAND:
    required: true
  STAGING:
    required: false
  E2E:
    required: false

jobs:
  build_server:
    name: Setup server
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Build server
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: server:latest
          outputs: type=docker,dest=/tmp/server.tar
        env:
          DATABASE_URL: "postgres://postgres:postgres@localhost:5432/postgres"
          REDIS_HOST: "localhost"
          PUBLIC_URL: ${{ inputs.BASE_PATH }}
          REACT_APP_GIT_SHA: ${{ inputs.GIT_SHA }}
          REACT_APP_E2E: ${{ inputs.E2E }}
          REACT_APP_STAGING: ${{ inputs.STAGING }}
      - name: Upload server
        uses: actions/upload-artifact@v4
        with:
          name: server-image
          path: /tmp/server.tar
  
  setup_services:
    runs-on: ubuntu-latest
    name: Setup services
    needs:
      - build_server

    services:
      db:
        image: postgres:15.7
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Download server
        uses: actions/download-artifact@v4
        with:
          name: server-image
      - name: Load server
        run: docker load < server.tar
      - name: Run server
        run: docker run -d --network host -p 8000:8000 --name server server

      - name: Wait for server container
        run: |
          until docker inspect -f '{{.State.Running}}' server | grep -q "true"; do
            sleep 1
          done

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test
        env:
          CI: true

      - name: Server logs
        if: failure()
        run: docker logs server -t --tail=100

      - name: Postgres logs
        if: failure()
        run: docker logs "${{ job.services.db.id }}"

      - name: Inspect server
        if: failure()
        run: docker inspect -f '{{range $key, $value := .NetworkSettings.Networks}}{{$key}} {{end}}' server

      - name: Run-down server
        if: always()
        run: docker stop server

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
